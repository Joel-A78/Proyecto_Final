import dash
import dash_bootstrap_components as dbc
from dash import Input, Output, dcc, html


app = dash.Dash(
    external_stylesheets=[dbc.themes.MINTY],
    index_string="""
    <!DOCTYPE html>
    <html>
        <head>
            {%metas%}
            <title>{%title%}</title>
            {%favicon%}
            {%css%}
            <!-- Fuente Orbitron -->
            <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
        </head>
        <body>
            {%app_entry%}
            <footer>
                {%config%}
                {%scripts%}
                {%renderer%}
            </footer>
        </body>
    </html>
    """
)

# Estilo Gaming para el Sidebar
SIDEBAR_STYLE = {
    "position": "fixed",
    "top": "0",
    "left": "0",
    "bottom": "0",
    "width": "17rem",
    "padding": "2rem 1rem",
    "background-color": "#1a1a2e",
    "color": "#e94560",
    "box-shadow": "0 0 12px #0f3460",
    "font-family": "'Orbitron', sans-serif",
}

# Estilo armonizado para el contenido
CONTENT_STYLE = {
    "margin-left": "18rem",
    "margin-right": "2rem",
    "padding": "2rem 1.5rem",
    "background-color": "#FFFFFF",
    "color": "#eaeaea",
    "font-family": "'Orbitron', sans-serif",
    "min-height": "100vh",
}

# Sidebar
sidebar = html.Div(
    [
        html.H2(" F1 STATS üèéÔ∏è", className="display-4"),
        html.Hr(),
        html.P("A simple sidebar layout with navigation links", className="lead"),
        dbc.Nav(
            [
                dbc.NavLink("Contenido", href="/", active="exact"),
                dbc.NavLink("Introduccion", href="page-1", active="exact"),
                dbc.NavLink("Page 2", href="/page-2", active="exact"),
                dbc.NavLink("Page 3", href="/page-3", active="exact"),
                dbc.NavLink("Page 4", href="/page-4", active="exact"),
            ],
            vertical=True,
            pills=True,
        ),
    ],
    style=SIDEBAR_STYLE,
)

# Contenido
content = html.Div(id="page-content", style=CONTENT_STYLE)

# Layout principal
app.layout = html.Div([dcc.Location(id="url"), sidebar, content])


# Callback para las p√°ginas
@app.callback(Output("page-content", "children"), [Input("url", "pathname")])
def render_page_content(pathname):
    if pathname == "/":
        return html.P("P√°gina principal", style={"font-size": "20px"})
    elif pathname == "/page-1":
        return html.P("Introducci√≥n")
    elif pathname == "/page-2":
        return html.P("Contenido de la p√°gina 2")
    elif pathname == "/page-3":
        return html.P("Contenido de la p√°gina 3")
    elif pathname == "/page-4":
        return html.P("Contenido de la p√°gina 4")

    return html.Div(
        [
            html.H1("404: Not found", className="text-danger"),
            html.Hr(),
            html.P(f"The pathname {pathname} was not recognised..."),
        ],
        className="p-20 bg-minty-light rounded-20 shadow-sm",
    )



if __name__ == "__main__":
    app.run(debug=True)
