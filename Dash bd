
                                                #base para la presentacion de los dashboards    
                                               ####hacerlo de esta forma separando por carpetas los diferentes db para nomas importar###
import dash
import welcome_dash as ws    
import dd as dp 
import dash_bootstrap_components as dbc
from dash import Input, Output, dcc, html, callback


# Estilo Gaming para el Sidebar
SIDEBAR_STYLE = {
    "position": "fixed",
    "top": "0",     # empieza en la parte superior
    "left": "0",      #izquierrda
    "bottom": "0",    # hasta el final
    "width": "17rem",    #barra ancha
    "padding": "2rem 1rem",   #espacio
    "background-color": "#f8f9fa",     #color de fondo
    "color": "#e94560",
    "box-shadow": "0 0 12px #0f3460",
    "font-family": "'Orbitron', sans-serif",
}

# estilos contenido principal
CONTENT_STYLE = {
    "margin-left": "18rem",  # espacio izquierda
    "margin-right": "2rem",  # margen derecha
    "padding": "2rem 1rem",  # espaciado interno
}

# barra lateral
sidebar = html.Div(
    [
        html.H2("GapMinder", className="display-4"),  # titulo
        html.Hr(),  # linea separadora
        html.P("A simple sidebar layout with navigation links", className="lead"),  # texto
        dbc.Nav(  # enlaces de navegación
            [
                dbc.NavLink("Home", href="/", active="exact"),  # home
                dbc.NavLink("DASHBOARD 1", href="/dash1", active="exact"),  # dashboard 1
                dbc.NavLink("DASHBOARD 2", href="/dash2", active="exact"),  # dashboard 2
                dbc.NavLink(" DASHBOARD 3", href="/dash3", active="exact"),  # dashboard 3
                dbc.NavLink(" github 3", href="/https://github.com/", active="exact", target="_blank"),  # github
            ],
            vertical=True,  # lista vertical
            pills=True,  # estilo pildoras
        ),
    ],
    style=SIDEBAR_STYLE,  # estilo barra lateral
)

# contenido principal
content = html.Div(id="page-content", style=CONTENT_STYLE)

# callback para actualizar contenido según URL
@callback(Output("page-content", "children"), [Input("url", "pathname")])
def render_page_content(pathname):
    if pathname == "/":
        return wd.welcome_dash()  # pagina principal
    elif pathname == "/dash1":
        return html.P("This is the content of page 1. Yay!")  # pagina 1
    elif pathname == "/dash2":
        return dp.poblacion()  # pagina 2
    elif pathname == "/dash3":
        return html.P("ESTA ES MI PAGINA 3!")  # pagina 3
    return html.Div(
        [
            html.H1("404: Not found", className="text-danger"),  # error 404
            html.Hr(),  # linea horizontal
            html.P(f"The pathname {pathname} was not recognised..."),  # mensaje error
        ],
        className="p-3 bg-light rounded-3",  # estilo mensaje error
    )

# ejecuta la app
if __name__ == "__main__":
    app = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])  # tema bootstrap

    # estructura de la app
    app.layout = html.Div([dcc.Location(id="url"), sidebar, content])  # dibujar

    app.run(debug=True)

# https://dash-bootstrap-components.opensource.faculty.ai/examples/simple-sidebar/
