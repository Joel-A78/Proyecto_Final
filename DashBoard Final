# DASH APP
# ----------------------------------------------------------------------------------

# IMPORTS
# ----------------------------------------------------------------------------------
import dash
import dash_bootstrap_components as dbc
from dash import Input, Output, dcc, html
import pandas as pd
import plotly.express as px
from sqlalchemy import create_engine

# ----------------------------------------------------------------------------------
# CONEXIÓN A LA BASE DE DATOS
# ----------------------------------------------------------------------------------

def obtain_values_mysql():
    try:
        engine = create_engine("mysql+mysqlconnector://root:12345678@127.0.0.2/f1")

        queries = {
            "victorias_totales": "SELECT Piloto, Valor, Pista FROM victorias_totales",
            "vueltas_rapidas": "SELECT Piloto, Valor, Pista FROM vueltas_rapidas",
            "victorias_por_circuito": "SELECT Piloto, Valor, Pista FROM victorias_por_circuito"
        }

        dataframes = {}
        for name, sql_query in queries.items():
            try:
                dataframes[name] = pd.read_sql(sql_query, con=engine)
                print(f"Loaded data for: {name}")
            except Exception as e:
                print(f"Error executing query for {name}: {e}")
                dataframes[name] = pd.DataFrame()

        return dataframes

    except Exception as e:
        print(f"Database connection error: {e}")
        return {}

all_f1_data = obtain_values_mysql()

# ----------------------------------------------------------------------------------
# DASH APP
# ----------------------------------------------------------------------------------

app = dash.Dash(
    __name__,
    external_stylesheets=[dbc.themes.MINTY],
    index_string="""
    <!DOCTYPE html>
    <html>
        <head>
            {%metas%}
            <title>{%title%}</title>
            {%favicon%}
            {%css%}
            <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
            <style>
                body {
                    margin: 0;
                    padding: 0;
                }
                .nav-link {
                    color: #e94560 !important;
                }
                .nav-link.active {
                    background-color: #e94560 !important;
                    color: white !important;
                }
            </style>
        </head>
        <body>
            {%app_entry%}
            <footer>
                {%config%}
                {%scripts%}
                {%renderer%}
            </footer>
        </body>
    </html>
    """
)

# ----------------------------------------------------------------------------------
# DASHBOARD STYLE
# ----------------------------------------------------------------------------------

PAGE_STYLE = {
    "background-image": "url('https://phantom-elmundo.uecdn.es/8e27ca532aae63320349a006609a7eb9/resize/1220/f/webp/assets/multimedia/imagenes/2025/04/13/17445767133764.jpg')",
    "background-size": "cover",
    "background-position": "center",
    "background-attachment": "fixed",
    "min-height": "100vh",
    "width": "100vw",
    "overflow-x": "hidden"
}

SIDEBAR_STYLE = {
    "position": "fixed",
    "top": "0",
    "left": "0",
    "bottom": "0",
    "width": "17rem",
    "padding": "2rem 1rem",
    "background-color": "#000000",
    "color": "#e94560",
    "box-shadow": "0 0 12px #FF2800",
    "font-family": "'Orbitron', sans-serif",
    "z-index": "1000",
}

CONTENT_STYLE = {
    "margin-left": "18rem",
    "margin-right": "2rem",
    "padding": "2rem 1.5rem",
    "background-color": "rgba(10, 15, 35, 0.85)",
    "color": "#ff2800",
    "font-family": "'Orbitron', sans-serif",
    "min-height": "100vh",
}

sidebar = html.Div(
    [
        html.Img(
            src="https://upload.wikimedia.org/wikipedia/commons/f/f2/New_era_F1_logo.png",
            style={"width": "100%", "margin-bottom": "20px"}),
        html.H2(html.Span(" STATS", style={"color": "white"}), style={"textAlign": "center"}),
        html.Hr(),
        html.P(html.Strong("Dashboard de estadísticas F1"), className="lead"),
        dbc.Nav(
            [
                dbc.NavLink("Contenido", href="/", active="exact"),
                dbc.NavLink("Introducción", href="/page-1", active="exact"),
                dbc.NavLink("Geo-Zone", href="/page-2", active="exact"),
                dbc.NavLink("Vueltas Rapidas", href="/page-3", active="exact"),
                dbc.NavLink("Victorias", href="/victories", active="exact"),
            ],
            vertical=True,
            pills=True,
        ),
    ],
    style=SIDEBAR_STYLE,
)

content = html.Div(id="page-content", style=CONTENT_STYLE)

app.layout = html.Div(
    style=PAGE_STYLE,
    children=[
        dcc.Location(id="url"),
        sidebar,
        content
    ]
)

# ----------------------------------------------------------------------------------
# CALLBACKS
# ----------------------------------------------------------------------------------

@app.callback(Output("page-content", "children"), [Input("url", "pathname")])
def render_page_content(pathname):
    if pathname == "/":
        return html.Div([
            html.H3("Bienvenido al Dashboard de Estadísticas F1", style={"color": "white"}),
            html.P("Explora las diferentes secciones usando el menú de la izquierda.", style={"color": "lightgray"})
        ])
    elif pathname == "/page-1":
        return html.Div([
            html.H3("Introducción", style={"color": "white"}),
            html.P("Aquí puedes poner una introducción a tus datos y el dashboard.", style={"color": "lightgray"})
        ])
    elif pathname == "/page-2":
        df = all_f1_data.get("victorias_por_circuito", pd.DataFrame())
        if df.empty or not {"Piloto", "Pista", "Valor"}.issubset(df.columns):
            return html.Div([
                html.H3("Geo-Zone: Victorias por Circuito", style={"color": "white"}),
                html.P("No hay datos disponibles para esta sección.", style={"color": "lightgray"})
            ])

        pilotos = sorted(df["Piloto"].dropna().unique())
        pistas = sorted(df["Pista"].dropna().unique())

        return html.Div([
            html.H3("Mapa de Victorias por Circuito", style={"color": "white"}),
            dbc.Row([
                dbc.Col([
                    html.Label("Selecciona Piloto", style={"color": "white"}),
                    dcc.Dropdown(
                        id="piloto-filter",
                        options=[{"label": p, "value": p} for p in pilotos],
                        value=None,
                        placeholder="Todos",
                        style={"color": "black"}
                    )
                ], md=6),
                dbc.Col([
                    html.Label("Selecciona Circuito", style={"color": "white"}),
                    dcc.Dropdown(
                        id="pista-filter",
                        options=[{"label": c, "value": c} for c in pistas],
                        value=None,
                        placeholder="Todos",
                        style={"color": "black"}
                    )
                ], md=6),
            ]),
            dcc.Graph(id="victory-map")
        ])

    elif pathname == "/page-3":
        df_vueltas = all_f1_data.get("vueltas_rapidas", pd.DataFrame())
        if df_vueltas.empty:
            return html.Div([
                html.H3("Vueltas Rápidas", style={"color": "white"}),
                html.P("No hay datos disponibles en la tabla `vueltas_rapidas`.", style={"color": "lightgray"})
            ])

        pistas = sorted(df_vueltas["Pista"].unique())
        return html.Div([
            html.H3("Vueltas Rápidas por Piloto", style={"color": "white"}),
            html.P("Selecciona una pista para filtrar los resultados:", style={"color": "lightgray"}),
            dcc.Dropdown(
                id="pista-dropdown",
                options=[{"label": pista, "value": pista} for pista in pistas],
                value=None,
                placeholder="Todas las pistas",
                style={"color": "black", "margin-bottom": "20px"}

            ),
            html.Div(id="tabla-vueltas-rapidas")

        ])

    elif pathname == "/victories":
        if "victorias_totales" in all_f1_data and not all_f1_data["victorias_totales"].empty:
            df_victorias = all_f1_data["victorias_totales"]
            fig = px.bar(
                df_victorias,
                x="Piloto",
                y="Valor",
                color="Pista",
                title="Victorias Totales por Piloto",
                labels={"Piloto": "Piloto", "Valor": "Total Victorias"},
                color_discrete_sequence=px.colors.qualitative.Bold
            )
            fig.update_layout(
                paper_bgcolor="rgba(0,0,0,0)",
                plot_bgcolor="rgba(0,0,0,0)",
                font_color="#e94560",
                title_font_color="white",
                xaxis_title_font_color="white",
                yaxis_title_font_color="white",
                hoverlabel=dict(bgcolor="black", font_color="white")
            )
            return html.Div([
                html.H3("Victorias Totales", style={"color": "white"}),
                dcc.Graph(figure=fig)
            ])
        else:
            return html.Div([
                html.H3("No se encontraron datos de victorias.", style={"color": "red"})
            ])

    return html.Div(
        [
            html.H1("404: Página no encontrada", style={"color": "red"}),
            html.Hr(style={"border-color": "#e94560"}),
            html.P(f"La URL '{pathname}' no existe.", style={"color": "lightgray"}),
        ],
        style={"padding": "20px"}
    )

# Callback para el mapa en Page 2
@app.callback(
    Output("victory-map", "figure"),
    [Input("piloto-filter", "value"), Input("pista-filter", "value")]
)
def update_map(selected_piloto, selected_pista):
    df = all_f1_data.get("victorias_por_circuito", pd.DataFrame())

    if df.empty or not {"Piloto", "Pista", "Valor"}.issubset(df.columns):
        return px.scatter_geo(title="Datos no disponibles")

    pista_coords = {
        'Monza': (45.6156, 9.2811),
        'Silverstone': (52.0786, -1.0169),
        'Spa': (50.4372, 5.9714),
        'Interlagos': (-23.7036, -46.6997),
        'Suzuka': (34.8431, 136.5419),
        'Monaco': (43.7347, 7.4206),
        'Red Bull Ring': (47.2197, 14.7647),
        'Circuit of the Americas': (30.1328, -97.6411),
        'Hungaroring': (47.5789, 19.2486),
        'Imola': (44.3439, 11.7167),
        'Zandvoort': (52.3889, 4.5400),
        'Bahrain': (26.0325, 50.5106),
        'Jeddah': (21.6319, 39.1044),
        'Melbourne': (-37.8497, 144.9680),
        'Singapore': (1.2914, 103.8640),
        'Las Vegas': (36.1147, -115.1728),
        'Miami': (25.9581, -80.2389),
        'Montreal': (45.5058, -73.5227),
        'Barcelona': (41.5701, 2.2615),
        'Shanghai': (31.3389, 121.2216),
        'Baku': (40.3725, 49.8533),
        'Qatar': (25.4864, 51.4542),
        'Abu Dhabi': (24.4672, 54.6031),
        'Hockenheim': (49.32,8.56 ),
        'Spa-Francorchamps': (50.437222, 5.971388),
        'Magny-Cours': (46.86333 , -3.16333),
        'CiudaddeMexico': (19.4033699, -99.0922377),
        'KualaLumpur': (3.1478 , 101.6953),
        'Shanghái': (31.22222, 121.45806),
        'BuenosAires': (-34.694272,-58.459347),
        'Spielberg': (47.21972 , -14.76472),
        'Sakhir': (26.0325, 50.510555555556),
        'Estambul': (40.951667, 29.405),
        'YasMarina': (24.45118, 54.39696),
        'Singapur': (1.352083, 103.819836),
        'Estoril': (38.75083 , -9.39417),
        'BrandsHatch': (51.358888888889, 0.26472222222222),
        'Kyalami': (-26.2049, 28.0749),
        'Nürburgring': (50.3394, 7.0233),
        'WatkinsGlen': (42.36583, 76.88667),
        'Jacarepagua': (-22.975555555556, -43.395),
        'LeCastellet': (43.2502, 5.7583),
        'Indianapolis': (39.7768, 86.2900),
        'Reims': (49.1515, 3.92917),
        'Austin': (30.1361, 97.6217),
        'Sochi': (43.4181, 39.9308),
        'NuevaDeli': (28.64, 77.23),
        'Yeongam': (34.75, 126.54),
        'Österreichring': (47.2345, 14.6805),
        'Detroit': (42.3065, 83.0441)
    }

    df = df.copy()
    df[["lat", "lon"]] = df["Pista"].apply(lambda x: pd.Series(pista_coords.get(x, (0, 0))))

    if selected_piloto:
        df = df[df["Piloto"] == selected_piloto]
    if selected_pista:
        df = df[df["Pista"] == selected_pista]

    fig = px.scatter_geo(
        df,
        lat="lat",
        lon="lon",
        text="Pista",
        size="Valor",
        color="Piloto",
        hover_name="Pista",
        projection="natural earth",
        title="Victorias por Circuito",
        color_discrete_sequence=px.colors.qualitative.Prism
    )

    fig.update_layout(
        geo=dict(bgcolor='rgba(0,0,0,0)'),
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)",
        font_color="#e94560",
        title_font_color="white",
        margin=dict(l=0, r=0, t=50, b=0),
        title_x=0.5,
    )

    return fig

@app.callback(
    Output("tabla-vueltas-rapidas", "children"),
    [Input("pista-dropdown", "value")]
)
def update_vueltas_table(selected_pista):
    df = all_f1_data.get("vueltas_rapidas", pd.DataFrame())

    if df.empty:
        return html.P("No hay datos disponibles.", style={"color": "lightgray"})

    if selected_pista:
        df = df[df["Pista"] == selected_pista]

    def generate_table(dataframe, max_rows=20):
        return html.Table(
            [html.Thead(html.Tr([html.Th(col, style={"color": "#e94560"}) for col in dataframe.columns]))] +
            [html.Tbody([
                html.Tr([
                    html.Td(dataframe.iloc[i][col], style={"color": "white"}) for col in dataframe.columns
                ]) for i in range(min(len(dataframe), max_rows))
            ])],
            style={
                "width": "100%",
                "borderCollapse": "collapse",
                "backgroundColor": "rgba(255,255,255,0.05)",
                "border": "1px solid #e94560",
                "marginTop": "20px"
            }
        )

    return generate_table(df)


if __name__ == "__main__":
    app.run(debug=True)
